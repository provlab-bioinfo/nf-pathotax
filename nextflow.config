/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    xiaoli-dong/pathotax Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input = null
    datatype = "reads" //"reads|genomes"
    platform = 'illumina' // illumina|nanopore

    // ############################### classifier based on reads ##############################
    //kraken2
    skip_kraken2 = false
    kraken2_db = "/nfs/APL_Genomics/db/prod/kraken2/k2_standard_08gb_20220926"

    //sylph and sylph-tax
    skip_sylph = false
    sylph_databases = ['gtdb', 'imgvr', 'uhgv', 'fungi']
    sylph_db_files = [
        gtdb: "/nfs/APL_Genomics/db/prod/sylph/gtdb-r226-c200-dbv1.syldb",
        imgvr: "/nfs/APL_Genomics/db/prod/sylph/imgvr_c200_v0.3.0.syldb",
        uhgv: "/nfs/APL_Genomics/db/prod/sylph/uhgv_c200_dbv1.syldb",
        fungi: "/nfs/APL_Genomics/db/prod/sylph/fungi-refseq-2024-07-25-c200-v0.3.syldb",
    ]

    sylphtax_databases = ['gtdb_r226', 'IMGVR_4.1', 'fungi_refseq_2024-07-25', 'uhgv_default']
    sylphtax_db_files = [
        "IMGVR_4.1": "/nfs/APL_Genomics/db/prod/sylph-tax/IMGVR_4.1_metadata.tsv.gz",
        gtdb_r226: "/nfs/APL_Genomics/db/prod/sylph-tax/gtdb_r226_metadata.tsv.gz",
        tara_SMAGs: "/nfs/APL_Genomics/db/prod/sylph-tax/tara_SMAGs_metadata.tsv.gz",
        "fungi_refseq_2024-07-25": "/nfs/APL_Genomics/db/prod/sylph-tax/fungi_refseq_2024-07-25_metadata.tsv.gz",
        ocean_dna: "/nfs/APL_Genomics/db/prod/sylph-tax/ocean_dna_metadata.tsv.gz",
        uhgv_default: "/nfs/APL_Genomics/db/prod/sylph-tax/uhgv_default_metadata.tsv.gz",
        globdb_r226: "/nfs/APL_Genomics/db/prod/sylph-tax/globdb_r226_sylph_tax.tsv.gz",
        soil_smag: "/nfs/APL_Genomics/db/prod/sylph-tax/soil_smag_metadata.tsv.gz",
        uhgv_ictv: "/nfs/APL_Genomics/db/prod/sylph-tax/uhgv_ictv_metadata.tsv.gz"
    ]

    //singleM
    skip_singlem = false
    singlem_db = "/nfs/APL_Genomics/db/prod/singlem/S5.4.0.GTDB_r226.metapackage_20250331.smpkg.zb"

    // ########################### classifier based on contigs #####################################
    //gtdbtk
    skip_gtdbtk = false
    gtdbtk_db = "/nfs/APL_Genomics/db/prod/gtdbtk/release226"
    gtdbtk_mash_db = "/nfs/APL_Genomics/db/prod/gtdbtk/release226/mash/gtdbtk.gtdb_ref_sketch.msh"

    // References
    genome = null
    igenomes_base = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore = false

    // MultiQC options
    multiqc_config = null
    multiqc_title = null
    multiqc_logo = null
    max_multiqc_email_size = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir = null
    publish_dir_mode = 'copy'
    email = null
    email_on_fail = null
    plaintext_email = false
    monochrome_logs = false
    hook_url = null
    help = false
    help_full = false
    show_hidden = false
    version = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
    // Config options
    config_profile_name = null
    config_profile_description = null

    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact = null
    config_profile_url = null

    // Schema validation default options
    validate_params = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        conda.channels = ['conda-forge', 'bioconda']
        apptainer.enabled = false
    }
    mamba {
        conda.enabled = true
        conda.useMamba = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    docker {
        docker.enabled = true
        conda.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        conda.enabled = false
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    podman {
        podman.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    shifter {
        shifter.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    charliecloud {
        charliecloud.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        apptainer.enabled = false
    }
    apptainer {
        apptainer.enabled = true
        apptainer.autoMounts = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    wave {
        apptainer.ociAutoPull = true
        singularity.ociAutoPull = true
        wave.enabled = true
        wave.freeze = true
        wave.strategy = 'conda,container'
    }
    gitpod {
        executor.name = 'local'
        executor.cpus = 4
        executor.memory = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus: 4,
                time: 1.h,
            ]
        }
    }
    gpu {
        docker.runOptions = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions = '--nv'
        singularity.runOptions = '--nv'
    }
    test {
        includeConfig 'conf/test.config'
    }
    test_full {
        includeConfig 'conf/test_full.config'
    }
}

// Load nf-core custom profiles from different institutions

// If params.custom_config_base is set AND either the NXF_OFFLINE environment variable is not set or params.custom_config_base is a local path, the nfcore_custom.config file from the specified base path is included.
// Load xiaoli-dong/pathotax custom profiles from different institutions.
includeConfig params.custom_config_base && (!System.getenv('NXF_OFFLINE') || !params.custom_config_base.startsWith('http')) ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"


// Load xiaoli-dong/pathotax custom profiles from different institutions.
// TODO nf-core: Optionally, you can add a pipeline-specific nf-core config at https://github.com/nf-core/configs
// includeConfig params.custom_config_base && (!System.getenv('NXF_OFFLINE') || !params.custom_config_base.startsWith('http')) ? "${params.custom_config_base}/pipeline/pathotax.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry = 'quay.io'
docker.registry = 'quay.io'
podman.registry = 'quay.io'
singularity.registry = 'quay.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",
    "-e",
    "-u",
    "-o",
    "pipefail",
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name = 'xiaoli-dong/pathotax'
    contributors = [
        [
            name: 'xiaoli dong',
            affiliation: '',
            email: '',
            github: '',
            contribution: [],
            orcid: '',
        ]
    ]
    homePage = 'https://github.com/xiaoli-dong/pathotax'
    description = """Taxonomy profiling of genomics and metagenomics data based on both sequence reads and assembled contigs"""
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '!>=24.10.5'
    version = '1.0.0dev'
    doi = ''
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.4.2'
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run xiaoli-dong/pathotax -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
